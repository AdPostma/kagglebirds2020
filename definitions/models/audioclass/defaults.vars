# frontend

# filterbank settings
filterbank=mel
filterbank.winsize=0.046439909
filterbank.num_bands=80
filterbank.min_freq=27.5
filterbank.max_freq=10000
filterbank.random_shift=0

# spectrogram settings
spect.fps=70
spect.magscale=powx:0.5
spect.norm=batchnorm
spect.denoise=none

# predictor

# architecture
model.predictor=custom_cnn
model.predictor.arch=conv2d:64@3x3,bn2d,lrelu,conv2d:64@3x3,bn2d,pool2d:max@3x3,lrelu,conv2d:128@3x3,bn2d,lrelu,conv2d:128@3x3,bn2d,lrelu,conv2d:128@17x3,bn2d,pool2d:max@5x3,lrelu,conv2d:1024@1x9,bn2d,lrelu,dropout:0.5,conv2d:1024@1x1,bn2d,lrelu,dropout:0.5,conv2d:C@1x1
model.predictor.input_name=
model.predictor.output_name=

# chunking (only possible at inference time, to reduce memory needs)
# axis to chunk along
model.chunk_axis=-1
# number of frontend frames passed through predictor at once
model.chunk_size=
# number of frontend frames to overlap (filled from receptive field if omitted)
model.chunk_overlap=

# backend

# pooling method
# mean, max, lme (log-mean-exp), lmex (trainable sharpness),
# lmexx (trainable log sharpness), lmexc/lmexxc (sharpness per class)
model.global_pool=lme:1
# pool in overlapping windows (can be useful for inference)
model.global_pool_size=0
model.global_pool_overlap=0

# comma-separated extra outputs to return: frontend, backend, filterbank
model.extra_outputs=
